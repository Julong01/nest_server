// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  loginId           String             @unique
  passwordHash      String?
  email             String?            @unique
  emailVerified     Boolean            @default(false)
  phone             String?            @unique
  phoneVerified     Boolean            @default(false)
  displayName       String?
  photoUrl          String?
  createdAt         DateTime           @default(now())
  isBanned          Boolean            @default(false) // 밴 여부
  posts             Post[]
  comments          Comment[]
  reliabilityChecks ReliabilityCheck[]
  refreshTokens     RefreshToken[]
  socialAccounts    SocialAccount[]
  Like              Like[]
}

model Post {
  id                Int                @id @default(autoincrement())
  author            User?              @relation(fields: [authorId], references: [id])
  authorId          String?
  type              PostType
  title             String
  content           String?
  summary           String? // 뉴스 요약
  imageUrl          String? // 썸네일 이미지
  sourceName        String? // 언론사 이름
  sourceLogoUrl     String? // 언론사 로고
  url               String?            @unique // 뉴스 원본 URL
  publishedAt       DateTime? // 뉴스 발행일
  crawledAt         DateTime? // 뉴스 크롤링 시각
  crawlStatus       String? // 크롤링 상태
  crawlError        String? // 크롤링 에러 메시지
  viewCount         Int                @default(0)
  trendingScore     Float? // 트렌딩 점수
  communityVerified Boolean?           @default(false) // 커뮤니티 글 검수 여부
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  comments          Comment[]          @relation("PostToComment")
  likes             Like[]
  reliabilityChecks ReliabilityCheck[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

enum PostType {
  COMMUNITY
  NEWS
}

model Comment {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  post      Post?     @relation("PostToComment", fields: [postId], references: [id])
  postId    Int?
}

model SocialAccount {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  provider   String
  providerId String
  email      String?
  createdAt  DateTime @default(now())

  @@unique([provider, providerId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}

model ReliabilityCheck {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  score     Float
  result    String
  checkedAt DateTime @default(now())
}
