// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  loginId        String   @unique
  passwordHash   String?
  email          String?  @unique
  emailVerified  Boolean  @default(false)
  phone          String?  @unique
  phoneVerified  Boolean  @default(false)
  displayName    String?
  photoUrl       String?
  createdAt      DateTime @default(now())
  posts          Post[]
  comments       Comment[]
  reliabilityChecks ReliabilityCheck[]
  refreshTokens  RefreshToken[]
  socialAccounts SocialAccount[]
}

model News {
  id           Int      @id @default(autoincrement())
  title        String
  url          String   @unique
  content      String?
  summary      String?  // 요약 내용
  imageUrl     String?  // 썸네일 이미지
  sourceName   String?  // 언론사 이름
  sourceLogoUrl String? // 언론사 로고
  publishedAt  DateTime
  crawledAt    DateTime @default(now())
  crawlStatus  String?  // 크롤링 상태 (예: success, fail)
  crawlError   String?  // 크롤링 에러 메시지
  reliabilityChecks ReliabilityCheck[]
  comments    Comment[]
}

model ReliabilityCheck {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  news      News     @relation(fields: [newsId], references: [id])
  newsId    Int
  score     Float
  result    String
  checkedAt DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  content   String
  createdAt DateTime @default(now())
  comments  Comment[] @relation("PostToComment")
}

model Comment {
  id        Int      @id @default(autoincrement())
  news      News?    @relation(fields: [newsId], references: [id])
  newsId    Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("CommentToComment")
  createdAt DateTime @default(now())
  post      Post?    @relation("PostToComment", fields: [postId], references: [id])
  postId    Int?
}

model SocialAccount {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  provider   String
  providerId String
  email      String?
  createdAt  DateTime @default(now())
  @@unique([provider, providerId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}
